#include "NavGraph.h"
#include "NavNode.h"
#include "NavEdge.h"

namespace liquid { namespace navigation {
#ifndef _NAVPATH_H
#define _NAVPATH_H

/**
 * \class NavPath
 *
 * \ingroup Navigation
 * \brief Stores the path from a source NavNode to a target NavNode, usually generated by the pathfinding Algorithm (AStar)
 *
 * \author Jamie Massey
 * \version 2.0
 * \date 22/04/2017
 *
 */

class NavPath
{
public:
    /** \brief NavPath Constructor
      * \param navGraphPtr Pointer to the NavGraph to use
      */
    NavPath(NavGraph* navGraphPtr);

    /// NavPath Destructor
    ~NavPath();

    /** \brief Pushes a new NavNode index to the front of the path
      * \param index Node index to be added
      */
    void pushFront(int32_t index);

    /** \brief Pushes a new NavNode index to the back of the path
      * \param index Node index to be added
      */
    void pushBack(int32_t index);

    /** \brief Pops the NavNode at the front of the path
      * \return Reference to the popped NavNode
      */
    const NavNode& popFront();

    /** \brief Pops the NavNode at the back of the path
      * \return Reference to the popped NavNode
      */
    const NavNode& popBack();

    /** \brief Loops the path by popping the front NavNode and pushing it to the back
      * \return Reference to the consumed NavNode
      */
    const NavNode& loopFront();

    /** \brief Loops the path by popping the back NavNode and pushing it to the front
      * \return Reference to the consumed NavNode
      */
    const NavNode& loopBack();

    /** \brief Gets the current NavPath as a std::vector of elements
      * \return Collection of NavNode elements
      */
    std::vector<NavNode> getNavPath();

    /** \brief Gets the current NavPath but reversed as a std::vector of elements
      * \return Collection of NavNode elements
      */
    std::vector<NavNode> getNavPathReversed();

    /// \return True if the path has no nodes, otherwise false
    const bool isEmpty() const;

    /** \brief Peek at the stored front NavNode but don't modify it
      * \return Reference to peeked NavNode
      */
    const NavNode& peekFront() const;

    /** \brief Peek at the stored back NavNode but don't modify it
      * \return Reference to peeked NavNode
      */
    const NavNode& peekBack() const;

protected:
    NavGraph*          mNavGraphPtr; ///< Pointer to the NavGraph that stores the NavNode objects
    std::list<int32_t> mNodes;       ///< List of stored NavNode objects that form this NavPath
};

#endif // _NAVPATH_H
}}
